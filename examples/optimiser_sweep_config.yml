# name: harflow3d_optimization_sweep
# method: grid # bayes or random or grid
# metric:
#   goal: minimize
#   name: latency
# parameters:
#   # models:
#   #   values: [ 'c3d', 'r2plus1d_18', 'r2plus1d_34', 'slowonly' ] # [ 'c3d', 'r2plus1d_18', 'r2plus1d_34', 'slowonly', 'x3d_m' ]
#   # platforms:
#   #   values: [ 'vc709', 'zcu102' ] # [ 'vus440', 'vc709', 'zcu102', 'zcu104' ]
#   general:
#     parameters:
#       resource_allocation:
#         value: 0.95
#       runtime_parameters:
#         value: True
#       weight_storage:
#         value: double_buffer # [ 'double_buffer', 'stream', 'share' ]
#       resource_model:
#         value: xgboost # [ 'linear_regression', 'xgboost' ]
#       channel_tiling:
#         value: True
#       filter_tiling:
#         value: True
#       optimization_passes:
#         value: [ "fuse_relu_into_previous" ] # [ [ "fuse_relu_into_previous" ], [] ]
#   annealing:
#     parameters:
#       T:
#         value: 10
#       T_min:
#         value: 0.0001
#       k:
#         value: 10
#       cool:
#         value: 0.98
#       transform_iterations:
#         value: 20
#       warm_start:
#         value: True
#       warm_start_time_limit:
#         value: 90
#   transforms:
#     parameters:
#       fine:
#         parameters:
#           apply_transform:
#             value: True
#           probability:
#             value: 0.10
#           start_complete:
#             value: True
#       coarse:
#         parameters:
#           apply_transform:
#             value: True
#           probability:
#             value: 0.35
#       shape:
#         parameters:
#           apply_transform:
#             value: True
#           probability:
#             value: 0.35
#           method:
#             value: [inherit, mixed, random] # [ 'inherit', 'random', 'mixed' ]
#           starting_shape:
#             value: min # [ '', 'min', 'max', 'median', 'percentage' ]
#           starting_shape_percentage:
#             value: 20
#           rand_shape_range:
#             values: [[15, 15, 5, 20], [5, 5, 5, 5], [30, 30, 10, 20]]
#           use_previous_shape:
#             value: True
#       combine:
#         parameters:
#           apply_transform:
#             value: True
#           probability:
#             value: 0.10
#           num_nodes:
#             value: 2 # [ 2, 5 ]
#           start_combine_all:
#             value: True
#           discriminate:
#             value: [{'layer_type': 'Conv', 'kernel_rows': 7, 'kernel_cols': 7, 'kernel_depth': 1},
#                     {'layer_type': 'Conv', 'depthwise': true}]
#       separate:
#         parameters:
#           apply_transform:
#             value: True
#           probability:
#             value: 0.10
#           num_nodes:
#             value: 2 # [ 2, 5 ]
#           allowed_types:
#             value: [ 'Conv',
#                      'Gemm',
#                      'MaxPool' ]
method: bayes # bayes or random or grid
metric:
  goal: minimize
  name: latency
parameters:
  # models:
  #   distribution: constant
#     values: [ 'c3d', 'r2plus1d_18', 'r2plus1d_34', 'slowonly' ] # [ 'c3d', 'r2plus1d_18', 'r2plus1d_34', 'slowonly', 'x3d_m' ]
  # platforms:
  #   distribution: constant
#     values: [ 'vc709', 'zcu102' ] # [ 'vus440', 'vc709', 'zcu102', 'zcu104' ]
  general:
    parameters:
      resource_allocation:
        distribution: constant
        value: 0.95
      runtime_parameters:
        distribution: constant
        value: True
      weight_storage:
        distribution: constant
        value: double_buffer # [ 'double_buffer', 'stream', 'share' ]
      resource_model:
        distribution: constant
        value: linear_regression # [ 'linear_regression', 'xgboost' ]
      channel_tiling:
        distribution: constant
        value: True
      filter_tiling:
        distribution: constant
        value: True
      optimization_passes:
        distribution: constant
        value: [ "fuse_relu_into_previous" ] # [ [ "fuse_relu_into_previous" ], [] ]
      convert_gemm_to_conv:
        distribution: constant
        value: True
  annealing:
    parameters:
      T:
        distribution: constant
        value: 10
      T_min:
        distribution: constant
        value: 0.00001
      k:
        distribution: constant
        value: 10
      cool:
        distribution: constant
        value: 0.99
      transform_iterations:
        distribution: constant
        value: 15
      warm_start:
        distribution: constant
        value: True
      warm_start_time_limit:
        distribution: constant
        value: 90
  transforms_probabilities:
    distribution: categorical
    values: [ [0.20, 0.20, 0.20, 0.20, 0.20],
              [0.10, 0.30, 0.30, 0.15, 0.15],
              [0.10, 0.40, 0.40, 0.05, 0.05],
              [0.10, 0.25, 0.25, 0.20, 0.20],
              [0.20, 0.25, 0.25, 0.20, 0.10],
              [0.10, 0.30, 0.30, 0.20, 0.10],
              [0.20, 0.40, 0.40, 0.00, 0.00],
              [0.10, 0.45, 0.45, 0.00, 0.00] ]
  transforms:
    parameters:
      fine:
        parameters:
          apply_transform:
            distribution: constant
            value: True
          probability:
            distribution: constant
            value: 0.10
          start_complete:
            distribution: constant
            value: True
      coarse:
        parameters:
          apply_transform:
            distribution: constant
            value: True
          probability:
            distribution: constant
            value: 0.30
      shape:
        parameters:
          apply_transform:
            distribution: constant
            value: True
          probability:
            distribution: constant
            value: 0.30
          method:
            distribution: constant
            value: mixed
          starting_shape:
            distribution: constant
            value: ""
          starting_shape_percentage:
            distribution: constant
            value: 20
          rand_shape_range:
            parameters:
              rows:
                distribution: constant
                value: 45
                # distribution: int_uniform
                # min: 5
                # max: 50
              cols:
                distribution: constant
                value: 45
                # distribution: int_uniform
                # min: 5
                # max: 50
              depth:
                distribution: constant
                value: 45
                # distribution: int_uniform
                # min: 5
                # max: 50
              channels:
                distribution: constant
                value: 45
                # distribution: int_uniform
                # min: 3
                # max: 50
          use_previous_shape:
            distribution: constant
            value: True
      combine:
        parameters:
          apply_transform:
            distribution: constant
            value: True
          probability:
            distribution: constant
            value: 0.15
          num_nodes:
            distribution: constant
            value: 2 # [ 2, 5 ]
          start_combine_all:
            distribution: constant
            value: True
          discriminate:
            distribution: constant
            value: [{'layer_type': 'Conv', 'kernel_rows': 7, 'kernel_cols': 7, 'kernel_depth': 1},
                    {'layer_type': 'Conv', 'depthwise': true}]
      separate:
        parameters:
          apply_transform:
            distribution: constant
            value: True
          probability:
            distribution: constant
            value: 0.15
          num_nodes:
            distribution: constant
            value: 2 # [ 2, 5 ]
          allowed_types:
            distribution: constant
            value: [ 'Conv',
                     'Gemm',
                     'MaxPool' ]
# early_terminate:
#   type: hyperband
#   max_iter: 300
#   s: 2